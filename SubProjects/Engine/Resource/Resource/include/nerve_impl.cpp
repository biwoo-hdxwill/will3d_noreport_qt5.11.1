#include "nerve_impl.h"

#include "../../Common/Common/W3Logger.h"

NerveImpl::NerveImpl() {}
NerveImpl::~NerveImpl() {}

void NerveImpl::SetNervePoints(int nerve_id, const std::vector<glm::vec3>& nerve_points) {
	if (nerve_datas_.find(nerve_id) == nerve_datas_.end()) {
		auto logger = common::Logger::instance();
		logger->Print(common::LogType::ERR, "NerveImpl::SetNervePoints: invalid nerve_id");
		assert(false);
		return;
	}


#if 0
	int size = 164;
	double x[] = {
		1.3743,
		2.0242,
		2.6651,
		3.2975,
		3.9217,
		4.5381,
		5.1469,
		5.7486,
		6.3435,
		6.932,
		7.5144,
		8.0912,
		8.6626,
		9.2291,
		9.7911,
		10.349,
		10.9031,
		11.4539,
		12.0018,
		12.5473,
		13.0908,
		13.6327,
		14.1735,
		14.7136,
		15.2536,
		15.794,
		16.3352,
		16.8779,
		17.4225,
		17.9696,
		18.5198,
		19.0737,
		19.6321,
		20.196,
		20.765,
		21.341,
		21.924,
		22.516,
		23.116,
		23.725,
		24.345,
		24.978,
		25.623,
		26.283,
		26.957,
		27.647,
		28.354,
		29.082,
		29.83,
		30.6,
		31.392,
		32.212,
		33.059,
		33.933,
		34.842,
		35.783,
		36.759,
		37.776,
		38.83,
		39.932,
		41.076,
		42.271,
		43.515,
		44.814,
		46.165,
		47.576,
		49.041,
		50.567,
		52.149,
		53.786,
		55.48,
		57.222,
		59.015,
		60.849,
		62.722,
		64.628,
		66.559,
		68.515,
		70.487,
		72.472,
		74.465,
		76.463,
		78.463,
		80.462,
		82.456,
		84.444,
		86.419,
		88.379,
		90.317,
		92.23,
		94.11,
		95.955,
		97.756,
		99.512,
		101.217,
		102.868,
		104.466,
		106.001,
		107.483,
		108.905,
		110.271,
		111.582,
		112.839,
		114.045,
		115.201,
		116.312,
		117.379,
		118.403,
		119.391,
		120.338,
		121.253,
		122.138,
		122.99,
		123.815,
		124.616,
		125.39,
		126.142,
		126.874,
		127.587,
		128.282,
		128.959,
		129.621,
		130.27,
		130.906,
		131.529,
		132.142,
		132.743,
		133.336,
		133.921,
		134.499,
		135.07,
		135.635,
		136.194,
		136.749,
		137.301,
		137.848,
		138.394,
		138.937,
		139.478,
		140.019,
		140.559,
		141.099,
		141.639,
		142.181,
		142.724,
		143.269,
		143.816,
		144.366,
		144.919,
		145.476,
		146.037,
		146.603,
		147.173,
		147.748,
		148.329,
		148.916,
		149.509,
		150.109,
		150.716,
		151.331,
		151.954,
		152.584,
		153.224,
		153.872,
	};

	double y[] = {
		160,
		158.1085,
		156.214,
		154.3166,
		152.4165,
		150.5139,
		148.6088,
		146.7015,
		144.792,
		142.8805,
		140.9672,
		139.0522,
		137.1356,
		135.2175,
		133.298,
		131.3774,
		129.4557,
		127.5331,
		125.6096,
		123.6854,
		121.7607,
		119.8355,
		117.91,
		115.9843,
		114.0586,
		112.133 ,
		110.2076,
		108.2826,
		106.3582,
		104.4345,
		102.5117,
		100.5899,
		98.6694 ,
		96.7505 ,
		94.8333 ,
		92.918  ,
		91.0049 ,
		89.0943 ,
		87.18643,
		85.28162,
		83.38022,
		81.48283,
		79.58993,
		77.70177,
		75.81882,
		73.9416 ,
		72.07089,
		70.20815,
		68.3533 ,
		66.5072 ,
		64.6709 ,
		62.8469 ,
		61.0349 ,
		59.236  ,
		57.4546 ,
		55.6898 ,
		53.944  ,
		52.2221 ,
		50.5228 ,
		48.8534 ,
		47.2135 ,
		45.6098 ,
		44.044  ,
		42.5233 ,
		41.049  ,
		39.6319 ,
		38.2699 ,
		36.9782 ,
		35.7545 ,
		34.6069 ,
		33.5441 ,
		32.5624 ,
		31.6763 ,
		30.88	  ,
		30.177  ,
		29.5722 ,
		29.0556 ,
		28.6387 ,
		28.3043 ,
		28.0632 ,
		27.9003 ,
		27.8166 ,
		27.8102 ,
		27.8722 ,
		28.0171 ,
		28.2412 ,
		28.5506 ,
		28.9507 ,
		29.4409 ,
		30.0254 ,
		30.7058 ,
		31.4763 ,
		32.3467 ,
		33.3023 ,
		34.348  ,
		35.4764 ,
		36.6789 ,
		37.9598 ,
		39.3028 ,
		40.7089 ,
		42.1695 ,
		43.6795 ,
		45.2354 ,
		46.8302 ,
		48.462  ,
		50.1252 ,
		51.8168 ,
		53.5347 ,
		55.2735 ,
		57.0349 ,
		58.8131 ,
		60.6068 ,
		62.4165 ,
		64.2382 ,
		66.0709 ,
		67.9149 ,
		69.7681 ,
		71.62928,
		73.49777,
		75.37331,
		77.25514,
		79.14227,
		81.03422,
		82.93051,
		84.83074,
		86.73474,
		88.64199,
		90.5521 ,
		92.4646 ,
		94.3795 ,
		96.2963 ,
		98.2148 ,
		100.1349,
		102.0564,
		103.9789,
		105.9024,
		107.8267,
		109.7516,
		111.6769,
		113.6025,
		115.5282,
		117.4539,
		119.3795,
		121.3047,
		123.2296,
		125.1539,
		127.0776,
		129.0004,
		130.9224,
		132.8433,
		134.763 ,
		136.6814,
		138.5984,
		140.5138,
		142.4276,
		144.3395,
		146.2495,
		148.1574,
		150.063 ,
		151.9662,
		153.8668,
		155.7648,
		157.6599,
		159.5519
	};
	std::vector<glm::vec3> pano_points;
	pano_points.clear();

	for (int i = 0; i < size; ++i)
	{
		pano_points.push_back(glm::vec3(x[i] / 0.2, y[i] / 0.2, 200.0f));
	}
	nerve_datas_[nerve_id]->set_points(pano_points);
#else
	nerve_datas_[nerve_id]->set_points(nerve_points);
#endif
}

void NerveImpl::SetNerveParams(int nerve_id, bool nerve_visible, float nerve_radius, const QColor & nerve_color) {
	if (nerve_datas_.find(nerve_id) == nerve_datas_.end())
		nerve_datas_[nerve_id].reset(new NerveData);

	nerve_datas_[nerve_id]->set_radius(nerve_radius);
	nerve_datas_[nerve_id]->set_color(nerve_color);
	nerve_datas_[nerve_id]->set_visible(nerve_visible);
}

void NerveImpl::SetNerveVisible(bool visible) {
	for (const auto& elem : nerve_datas_)
		elem.second->set_visible(visible);
}

void NerveImpl::GenerateNerveMesh(int nerve_id, const std::vector<glm::vec3>& nerve_points_in_gl, const glm::vec3& nerve_radius_scale_in_gl) {
	if (nerve_datas_.find(nerve_id) == nerve_datas_.end()) {
		auto logger = common::Logger::instance();
		logger->Print(common::LogType::ERR, "NerveResource::GenerateNerveMesh: Index out of range.");
		return;
	}

	nerve_datas_[nerve_id]->GenerateMesh(nerve_points_in_gl, nerve_radius_scale_in_gl);
}

void NerveImpl::ClearNervePointsAll(int nerve_id) {

	auto iter_nd = nerve_datas_.find(nerve_id);
	if (iter_nd != nerve_datas_.end())
		nerve_datas_.erase(iter_nd);
}

bool NerveImpl::IsValidNerve(int nerve_id) {
	if (nerve_datas_.find(nerve_id) != nerve_datas_.end())
		return true;
	else
		return false;
}
