#pragma once
#include "../Core/util_global.h"
#include <vector>
#include <map>
#include "Edge.h"
//
// 나중에 필요하다면 Triangle말고도 임의의 convex Polygon에 대해서 되도록 확장
// EdgeToTriIdxMapper class
// this executes mapping Edge --> triangle index
class UTIL_EXPORT EdgeToTriIdxMapper {
protected:
	std::vector<std::vector<int>> _tris;
	std::map<tora::Edge, std::vector<int>> _edgeToTriIdx;
public:
	EdgeToTriIdxMapper();

	// constructor (tris)
	// tris = 3d mesh idxs
	EdgeToTriIdxMapper(const std::vector<std::vector<int>>& tris);

	// for given edge, find triangle index containing the edge.
	std::vector<int> findTriIdxByEdge(const tora::Edge& e) const;

	// for given triange index, find edges in the triangle.
	std::vector<tora::Edge> findEdgeByTriIdx(int triIdx) const;

	// get all edges generated by triangles (return key of map _edgeToTriIdx)
	std::vector<tora::Edge> getEdges() const;

	// get boundary edges
	// criteria: edge which has only one triangle idx in _edgeToTriIdx
	std::vector<tora::Edge> getBoundaryEdges() const;
	static std::vector<int> boundarySort(const std::vector<tora::Edge>& bondaryEdges);
};
